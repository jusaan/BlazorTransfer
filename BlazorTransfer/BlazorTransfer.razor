
@using Microsoft.AspNetCore.Components.Web;

@if (DataSource != null && DataSource.Any())
{
    targetKeysItems = DataSource.Where(d => TargetKeys.Any(t => t == d.GetType().GetProperty(ValueProperty).GetValue(d, null).ToString()));
    dataSourceItems = DataSource.Except(targetKeysItems);
    <div class="blazortransfer">
        <div class="blazortransfer-list">
            <div class="blazortransfer-header">
                <input class="blazortransfer-checkbox" type="checkbox" checked="@(dataSourceItems.Count() == selectedSourceKeys.Count())" disabled="@(!dataSourceItems.Any())" @onchange="@((e) => SelectAllSourceCheckboxClicked(e, dataSourceItems))"> @selectedSourceKeys.Count()/@dataSourceItems.Count() <span>items</span>
            </div>
            <hr style="margin: 0" />
            @if (ShowSearch)
            {
                <div class="blazortransfer-search">
                    <input type="search" placeholder="Search here" @bind-value="sourceSearch" @bind-value:event="oninput" />
                </div>
            }
            <ul>
                @foreach (var item in dataSourceItems.Where(x => x.GetType().GetProperty(TextProperty).GetValue(x, null).ToString().ToLower().Contains(sourceSearch.ToLower()) || string.IsNullOrEmpty(sourceSearch)))
                {
                    var value = item.GetType().GetProperty(ValueProperty).GetValue(item, null);
                    var text = item.GetType().GetProperty(TextProperty).GetValue(item, null);

                    <li @key="value">
                        <label class="blazortransfer-item-description" title="@text">
                            
                            <input class="blazortransfer-checkbox" type="checkbox" value="@value" checked="@allSourceKeysChecked" @onchange="@((e) => SourceCheckboxClicked(e, value))" /> <span>@text</span>
                        </label>
                    </li>
                }
            </ul>
        </div>      
        <div style="display: grid">
            <button type="button" class="blazortransfer-button blazortransfer-button-left" disabled="@(!selectedTargetKeys.Any())" @onclick="@(() => RemoveTargetKeys())">&lt</button>
            <button type="button" class="blazortransfer-button blazortransfer-button-right" disabled="@(!selectedSourceKeys.Any())" @onclick="@(() => AddTargetKeys())">&gt</button>
        </div>
        <div class="blazortransfer-list">
            <div class="blazortransfer-header">
                <input class="blazortransfer-checkbox" type="checkbox" checked="@(targetKeysItems.Count() == selectedTargetKeys.Count())" disabled="@(!targetKeysItems.Any())" @onchange="@((e) => SelectAllTargetCheckboxClicked(e, targetKeysItems))"> @selectedTargetKeys.Count()/@targetKeysItems.Count() <span>items</span>
            </div>
            <hr style="margin: 0" />
            @if (ShowSearch)
            {
                <div class="blazortransfer-search">
                    <input type="search" placeholder="Search here" @bind-value="targetSearch" @bind-value:event="oninput" />
                </div>
            }
            <ul>
                @foreach (var item in targetKeysItems.Where(x => x.GetType().GetProperty(TextProperty).GetValue(x, null).ToString().ToLower().Contains(targetSearch.ToLower()) || string.IsNullOrEmpty(targetSearch)))
                {
                    var value = item.GetType().GetProperty(ValueProperty).GetValue(item, null);
                    var text = item.GetType().GetProperty(TextProperty).GetValue(item, null);

                    <li @key="value">
                        <label class="blazortransfer-item-description" title="@text">
                            <input class="blazortransfer-checkbox" type="checkbox" value="@value" checked="@allTargetKeysChecked" @onchange="@((e) => TargetCheckboxClicked(e, value))" /> <span>@text</span>
                        </label>
                    </li>
                }
            </ul>
        </div>
    </div>
}