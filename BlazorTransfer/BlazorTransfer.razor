@typeparam TItem

@using Microsoft.AspNetCore.Components.Web;

@if (DataSource != null && DataSource.Any())
{
    targetKeysItems = DataSource.Where(d => Value.Any(t => t.Equals(d.GetType().GetProperty(ValueProperty).GetValue(d, null))));
    dataSourceItems = DataSource.Except(targetKeysItems);
    <div class="blazortransfer">
        <div class="blazortransfer-list">
            <div class="blazortransfer-header">
                <input class="blazortransfer-checkbox" type="checkbox" checked="@(dataSourceItems.Count() == selectedSourceKeys.Count())" disabled="@(!dataSourceItems.Any())" @onchange="@((e) => SelectAllSourceCheckboxClicked(e, dataSourceItems))"> @selectedSourceKeys.Count()/@dataSourceItems.Count() <span>@HeaderText</span>
            </div>
            <hr style="margin: 0" />
            @if (ShowSearch)
            {
                <div class="blazortransfer-search">
                    <input type="search" placeholder="@SearchPlaceholder" @bind-value="sourceSearch" @bind-value:event="oninput" />
                </div>
            }

            @if (!dataSourceItems.Any())
            {
                <p class="blazortransfer-empty">&#128449;</p>
            }
            else
            {
                <ul>
                    @foreach (var item in dataSourceItems)
                    {
                        var value = item.GetType().GetProperty(ValueProperty).GetValue(item, null);
                        var text = item.GetType().GetProperty(TextProperty).GetValue(item, null);

                        <li @key="value" style="display: @(text.ToString().ToLower().Contains(sourceSearch.ToLower()) || string.IsNullOrEmpty(sourceSearch) ? "block" : "none")">
                            <label class="blazortransfer-item-description" title="@text">

                                <input class="blazortransfer-checkbox" type="checkbox" value="@value" checked="@allSourceKeysChecked" @onchange="@((e) => SourceCheckboxClicked(e, value))" /> <span>@text</span>
                            </label>
                        </li>
                    }
                </ul>
            }         
        </div>      
        <div style="display: grid">
            <button type="button" class="blazortransfer-button blazortransfer-button-left" disabled="@(!selectedTargetKeys.Any())" @onclick="@(() => RemoveTargetKeys())">&lt</button>
            <button type="button" class="blazortransfer-button blazortransfer-button-right" disabled="@(!selectedSourceKeys.Any())" @onclick="@(() => AddTargetKeys())">&gt</button>
        </div>
        <div class="blazortransfer-list">
            <div class="blazortransfer-header">
                <input class="blazortransfer-checkbox" type="checkbox" checked="@(targetKeysItems.Count() == selectedTargetKeys.Count())" disabled="@(!targetKeysItems.Any())" @onchange="@((e) => SelectAllTargetCheckboxClicked(e, targetKeysItems))"> @selectedTargetKeys.Count()/@targetKeysItems.Count() <span>@HeaderText</span>
            </div>
            <hr style="margin: 0" />
            @if (ShowSearch)
            {
                <div class="blazortransfer-search">
                    <input type="search" placeholder="@SearchPlaceholder" @bind-value="targetSearch" @bind-value:event="oninput" />
                </div>
            }

            @if (!targetKeysItems.Any())
            {
                <p class="blazortransfer-empty">&#128449;</p>
            }
            else
            {
                <ul>
                    @foreach (var item in targetKeysItems)
                    {
                        var value = item.GetType().GetProperty(ValueProperty).GetValue(item, null);
                        var text = item.GetType().GetProperty(TextProperty).GetValue(item, null);

                        <li @key="value" style="display: @(text.ToString().ToLower().Contains(sourceSearch.ToLower()) || string.IsNullOrEmpty(sourceSearch) ? "block" : "none")">
                            <label class="blazortransfer-item-description" title="@text">
                                <input class="blazortransfer-checkbox" type="checkbox" value="@value" checked="@allTargetKeysChecked" @onchange="@((e) => TargetCheckboxClicked(e, value))" /> <span>@text</span>
                            </label>
                        </li>
                    }
                </ul>
            }          
        </div>
    </div>
}